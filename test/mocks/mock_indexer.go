// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/indexer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	store "codebase-indexer/pkg/codegraph/store"
	types "codebase-indexer/pkg/codegraph/types"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIndexer is a mock of Indexer interface.
type MockIndexer struct {
	ctrl     *gomock.Controller
	recorder *MockIndexerMockRecorder
}

// MockIndexerMockRecorder is the mock recorder for MockIndexer.
type MockIndexerMockRecorder struct {
	mock *MockIndexer
}

// NewMockIndexer creates a new mock instance.
func NewMockIndexer(ctrl *gomock.Controller) *MockIndexer {
	mock := &MockIndexer{ctrl: ctrl}
	mock.recorder = &MockIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexer) EXPECT() *MockIndexerMockRecorder {
	return m.recorder
}

// GetSummary mocks base method.
func (m *MockIndexer) GetSummary(ctx context.Context, workspacePath string) (*types.CodeGraphSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSummary", ctx, workspacePath)
	ret0, _ := ret[0].(*types.CodeGraphSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSummary indicates an expected call of GetSummary.
func (mr *MockIndexerMockRecorder) GetSummary(ctx, workspacePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSummary", reflect.TypeOf((*MockIndexer)(nil).GetSummary), ctx, workspacePath)
}

// IndexFiles mocks base method.
func (m *MockIndexer) IndexFiles(ctx context.Context, workspacePath string, filePaths []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexFiles", ctx, workspacePath, filePaths)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexFiles indicates an expected call of IndexFiles.
func (mr *MockIndexerMockRecorder) IndexFiles(ctx, workspacePath, filePaths interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexFiles", reflect.TypeOf((*MockIndexer)(nil).IndexFiles), ctx, workspacePath, filePaths)
}

// IndexIter mocks base method.
func (m *MockIndexer) IndexIter(ctx context.Context, projectUuid string) store.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexIter", ctx, projectUuid)
	ret0, _ := ret[0].(store.Iterator)
	return ret0
}

// IndexIter indicates an expected call of IndexIter.
func (mr *MockIndexerMockRecorder) IndexIter(ctx, projectUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexIter", reflect.TypeOf((*MockIndexer)(nil).IndexIter), ctx, projectUuid)
}

// IndexWorkspace mocks base method.
func (m *MockIndexer) IndexWorkspace(ctx context.Context, workspacePath string) (*types.IndexTaskMetrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexWorkspace", ctx, workspacePath)
	ret0, _ := ret[0].(*types.IndexTaskMetrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexWorkspace indicates an expected call of IndexWorkspace.
func (mr *MockIndexerMockRecorder) IndexWorkspace(ctx, workspacePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexWorkspace", reflect.TypeOf((*MockIndexer)(nil).IndexWorkspace), ctx, workspacePath)
}

// QueryCallGraph mocks base method.
func (m *MockIndexer) QueryCallGraph(ctx context.Context, opts *types.QueryCallGraphOptions) ([]*types.RelationNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCallGraph", ctx, opts)
	ret0, _ := ret[0].([]*types.RelationNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCallGraph indicates an expected call of QueryCallGraph.
func (mr *MockIndexerMockRecorder) QueryCallGraph(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCallGraph", reflect.TypeOf((*MockIndexer)(nil).QueryCallGraph), ctx, opts)
}

// QueryDefinitions mocks base method.
func (m *MockIndexer) QueryDefinitions(ctx context.Context, options *types.QueryDefinitionOptions) ([]*types.Definition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDefinitions", ctx, options)
	ret0, _ := ret[0].([]*types.Definition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDefinitions indicates an expected call of QueryDefinitions.
func (mr *MockIndexerMockRecorder) QueryDefinitions(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDefinitions", reflect.TypeOf((*MockIndexer)(nil).QueryDefinitions), ctx, options)
}

// QueryReferences mocks base method.
func (m *MockIndexer) QueryReferences(ctx context.Context, opts *types.QueryReferenceOptions) ([]*types.RelationNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryReferences", ctx, opts)
	ret0, _ := ret[0].([]*types.RelationNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryReferences indicates an expected call of QueryReferences.
func (mr *MockIndexerMockRecorder) QueryReferences(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryReferences", reflect.TypeOf((*MockIndexer)(nil).QueryReferences), ctx, opts)
}

// RemoveAllIndexes mocks base method.
func (m *MockIndexer) RemoveAllIndexes(ctx context.Context, workspacePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllIndexes", ctx, workspacePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllIndexes indicates an expected call of RemoveAllIndexes.
func (mr *MockIndexerMockRecorder) RemoveAllIndexes(ctx, workspacePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllIndexes", reflect.TypeOf((*MockIndexer)(nil).RemoveAllIndexes), ctx, workspacePath)
}

// RemoveIndexes mocks base method.
func (m *MockIndexer) RemoveIndexes(ctx context.Context, workspacePath string, filePaths []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveIndexes", ctx, workspacePath, filePaths)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveIndexes indicates an expected call of RemoveIndexes.
func (mr *MockIndexerMockRecorder) RemoveIndexes(ctx, workspacePath, filePaths interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIndexes", reflect.TypeOf((*MockIndexer)(nil).RemoveIndexes), ctx, workspacePath, filePaths)
}

// RenameIndexes mocks base method.
func (m *MockIndexer) RenameIndexes(ctx context.Context, workspacePath, sourceFilePath, targetFilePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameIndexes", ctx, workspacePath, sourceFilePath, targetFilePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameIndexes indicates an expected call of RenameIndexes.
func (mr *MockIndexerMockRecorder) RenameIndexes(ctx, workspacePath, sourceFilePath, targetFilePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameIndexes", reflect.TypeOf((*MockIndexer)(nil).RenameIndexes), ctx, workspacePath, sourceFilePath, targetFilePath)
}
