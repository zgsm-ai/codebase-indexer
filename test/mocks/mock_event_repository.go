// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/event.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "codebase-indexer/internal/model"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockEventRepository is a mock of EventRepository interface.
type MockEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryMockRecorder
}

// MockEventRepositoryMockRecorder is the mock recorder for MockEventRepository.
type MockEventRepositoryMockRecorder struct {
	mock *MockEventRepository
}

// NewMockEventRepository creates a new mock instance.
func NewMockEventRepository(ctrl *gomock.Controller) *MockEventRepository {
	mock := &MockEventRepository{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepository) EXPECT() *MockEventRepositoryMockRecorder {
	return m.recorder
}

// BatchCreateEvents mocks base method.
func (m *MockEventRepository) BatchCreateEvents(events []*model.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateEvents", events)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreateEvents indicates an expected call of BatchCreateEvents.
func (mr *MockEventRepositoryMockRecorder) BatchCreateEvents(events interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateEvents", reflect.TypeOf((*MockEventRepository)(nil).BatchCreateEvents), events)
}

// BatchDeleteEvents mocks base method.
func (m *MockEventRepository) BatchDeleteEvents(ids []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteEvents", ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDeleteEvents indicates an expected call of BatchDeleteEvents.
func (mr *MockEventRepositoryMockRecorder) BatchDeleteEvents(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteEvents", reflect.TypeOf((*MockEventRepository)(nil).BatchDeleteEvents), ids)
}

// ClearTable mocks base method.
func (m *MockEventRepository) ClearTable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearTable indicates an expected call of ClearTable.
func (mr *MockEventRepositoryMockRecorder) ClearTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearTable", reflect.TypeOf((*MockEventRepository)(nil).ClearTable))
}

// CreateEvent mocks base method.
func (m *MockEventRepository) CreateEvent(event *model.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventRepositoryMockRecorder) CreateEvent(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventRepository)(nil).CreateEvent), event)
}

// DeleteEvent mocks base method.
func (m *MockEventRepository) DeleteEvent(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockEventRepositoryMockRecorder) DeleteEvent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockEventRepository)(nil).DeleteEvent), id)
}

// GetEventByID mocks base method.
func (m *MockEventRepository) GetEventByID(id int64) (*model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByID", id)
	ret0, _ := ret[0].(*model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByID indicates an expected call of GetEventByID.
func (mr *MockEventRepositoryMockRecorder) GetEventByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByID", reflect.TypeOf((*MockEventRepository)(nil).GetEventByID), id)
}

// GetEventsByType mocks base method.
func (m *MockEventRepository) GetEventsByType(eventTypes []string, limit int, isDesc bool) ([]*model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByType", eventTypes, limit, isDesc)
	ret0, _ := ret[0].([]*model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByType indicates an expected call of GetEventsByType.
func (mr *MockEventRepositoryMockRecorder) GetEventsByType(eventTypes, limit, isDesc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByType", reflect.TypeOf((*MockEventRepository)(nil).GetEventsByType), eventTypes, limit, isDesc)
}

// GetEventsByTypeAndEmbeddingStatus mocks base method.
func (m *MockEventRepository) GetEventsByTypeAndEmbeddingStatus(eventTypes []string, limit int, isDesc bool, statuses []int) ([]*model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByTypeAndEmbeddingStatus", eventTypes, limit, isDesc, statuses)
	ret0, _ := ret[0].([]*model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByTypeAndEmbeddingStatus indicates an expected call of GetEventsByTypeAndEmbeddingStatus.
func (mr *MockEventRepositoryMockRecorder) GetEventsByTypeAndEmbeddingStatus(eventTypes, limit, isDesc, statuses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByTypeAndEmbeddingStatus", reflect.TypeOf((*MockEventRepository)(nil).GetEventsByTypeAndEmbeddingStatus), eventTypes, limit, isDesc, statuses)
}

// GetEventsByTypeAndStatusAndWorkspaces mocks base method.
func (m *MockEventRepository) GetEventsByTypeAndStatusAndWorkspaces(eventTypes, workspacePaths []string, limit int, isDesc bool, embeddingStatuses, codegraphStatuses []int) ([]*model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByTypeAndStatusAndWorkspaces", eventTypes, workspacePaths, limit, isDesc, embeddingStatuses, codegraphStatuses)
	ret0, _ := ret[0].([]*model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByTypeAndStatusAndWorkspaces indicates an expected call of GetEventsByTypeAndStatusAndWorkspaces.
func (mr *MockEventRepositoryMockRecorder) GetEventsByTypeAndStatusAndWorkspaces(eventTypes, workspacePaths, limit, isDesc, embeddingStatuses, codegraphStatuses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByTypeAndStatusAndWorkspaces", reflect.TypeOf((*MockEventRepository)(nil).GetEventsByTypeAndStatusAndWorkspaces), eventTypes, workspacePaths, limit, isDesc, embeddingStatuses, codegraphStatuses)
}

// GetEventsByWorkspace mocks base method.
func (m *MockEventRepository) GetEventsByWorkspace(workspacePath string, limit int, isDesc bool) ([]*model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByWorkspace", workspacePath, limit, isDesc)
	ret0, _ := ret[0].([]*model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByWorkspace indicates an expected call of GetEventsByWorkspace.
func (mr *MockEventRepositoryMockRecorder) GetEventsByWorkspace(workspacePath, limit, isDesc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByWorkspace", reflect.TypeOf((*MockEventRepository)(nil).GetEventsByWorkspace), workspacePath, limit, isDesc)
}

// GetEventsByWorkspaceAndEmbeddingStatus mocks base method.
func (m *MockEventRepository) GetEventsByWorkspaceAndEmbeddingStatus(workspacePath string, limit int, isDesc bool, statuses []int) ([]*model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByWorkspaceAndEmbeddingStatus", workspacePath, limit, isDesc, statuses)
	ret0, _ := ret[0].([]*model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByWorkspaceAndEmbeddingStatus indicates an expected call of GetEventsByWorkspaceAndEmbeddingStatus.
func (mr *MockEventRepositoryMockRecorder) GetEventsByWorkspaceAndEmbeddingStatus(workspacePath, limit, isDesc, statuses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByWorkspaceAndEmbeddingStatus", reflect.TypeOf((*MockEventRepository)(nil).GetEventsByWorkspaceAndEmbeddingStatus), workspacePath, limit, isDesc, statuses)
}

// GetEventsByWorkspaceAndType mocks base method.
func (m *MockEventRepository) GetEventsByWorkspaceAndType(workspacePath string, eventTypes []string, limit int, isDesc bool) ([]*model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByWorkspaceAndType", workspacePath, eventTypes, limit, isDesc)
	ret0, _ := ret[0].([]*model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByWorkspaceAndType indicates an expected call of GetEventsByWorkspaceAndType.
func (mr *MockEventRepositoryMockRecorder) GetEventsByWorkspaceAndType(workspacePath, eventTypes, limit, isDesc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByWorkspaceAndType", reflect.TypeOf((*MockEventRepository)(nil).GetEventsByWorkspaceAndType), workspacePath, eventTypes, limit, isDesc)
}

// GetEventsByWorkspaceForDeduplication mocks base method.
func (m *MockEventRepository) GetEventsByWorkspaceForDeduplication(workspacePath string) ([]*model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByWorkspaceForDeduplication", workspacePath)
	ret0, _ := ret[0].([]*model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByWorkspaceForDeduplication indicates an expected call of GetEventsByWorkspaceForDeduplication.
func (mr *MockEventRepositoryMockRecorder) GetEventsByWorkspaceForDeduplication(workspacePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByWorkspaceForDeduplication", reflect.TypeOf((*MockEventRepository)(nil).GetEventsByWorkspaceForDeduplication), workspacePath)
}

// GetEventsCountByType mocks base method.
func (m *MockEventRepository) GetEventsCountByType(eventTypes []string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsCountByType", eventTypes)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsCountByType indicates an expected call of GetEventsCountByType.
func (mr *MockEventRepositoryMockRecorder) GetEventsCountByType(eventTypes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsCountByType", reflect.TypeOf((*MockEventRepository)(nil).GetEventsCountByType), eventTypes)
}

// GetEventsCountByWorkspaceAndStatus mocks base method.
func (m *MockEventRepository) GetEventsCountByWorkspaceAndStatus(workspacePaths []string, embeddingStatuses, codegraphStatuses []int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsCountByWorkspaceAndStatus", workspacePaths, embeddingStatuses, codegraphStatuses)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsCountByWorkspaceAndStatus indicates an expected call of GetEventsCountByWorkspaceAndStatus.
func (mr *MockEventRepositoryMockRecorder) GetEventsCountByWorkspaceAndStatus(workspacePaths, embeddingStatuses, codegraphStatuses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsCountByWorkspaceAndStatus", reflect.TypeOf((*MockEventRepository)(nil).GetEventsCountByWorkspaceAndStatus), workspacePaths, embeddingStatuses, codegraphStatuses)
}

// GetExpiredEventIDs mocks base method.
func (m *MockEventRepository) GetExpiredEventIDs(cutoffTime time.Time) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiredEventIDs", cutoffTime)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpiredEventIDs indicates an expected call of GetExpiredEventIDs.
func (mr *MockEventRepositoryMockRecorder) GetExpiredEventIDs(cutoffTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiredEventIDs", reflect.TypeOf((*MockEventRepository)(nil).GetExpiredEventIDs), cutoffTime)
}

// GetLatestEventByWorkspaceAndSourcePath mocks base method.
func (m *MockEventRepository) GetLatestEventByWorkspaceAndSourcePath(workspacePath, sourceFilePath string) (*model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestEventByWorkspaceAndSourcePath", workspacePath, sourceFilePath)
	ret0, _ := ret[0].(*model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestEventByWorkspaceAndSourcePath indicates an expected call of GetLatestEventByWorkspaceAndSourcePath.
func (mr *MockEventRepositoryMockRecorder) GetLatestEventByWorkspaceAndSourcePath(workspacePath, sourceFilePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestEventByWorkspaceAndSourcePath", reflect.TypeOf((*MockEventRepository)(nil).GetLatestEventByWorkspaceAndSourcePath), workspacePath, sourceFilePath)
}

// GetRecentEvents mocks base method.
func (m *MockEventRepository) GetRecentEvents(workspacePath string, limit int) ([]*model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentEvents", workspacePath, limit)
	ret0, _ := ret[0].([]*model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentEvents indicates an expected call of GetRecentEvents.
func (mr *MockEventRepositoryMockRecorder) GetRecentEvents(workspacePath, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentEvents", reflect.TypeOf((*MockEventRepository)(nil).GetRecentEvents), workspacePath, limit)
}

// GetTableName mocks base method.
func (m *MockEventRepository) GetTableName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTableName indicates an expected call of GetTableName.
func (mr *MockEventRepositoryMockRecorder) GetTableName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableName", reflect.TypeOf((*MockEventRepository)(nil).GetTableName))
}

// UpdateEvent mocks base method.
func (m *MockEventRepository) UpdateEvent(event *model.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventRepositoryMockRecorder) UpdateEvent(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventRepository)(nil).UpdateEvent), event)
}

// UpdateEventByMap mocks base method.
func (m *MockEventRepository) UpdateEventByMap(id int64, updates map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventByMap", id, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEventByMap indicates an expected call of UpdateEventByMap.
func (mr *MockEventRepositoryMockRecorder) UpdateEventByMap(id, updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventByMap", reflect.TypeOf((*MockEventRepository)(nil).UpdateEventByMap), id, updates)
}
