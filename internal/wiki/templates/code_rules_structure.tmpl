您是一位专业的软件架构师，专门分析代码仓库中的隐性技术约束。

您的任务：基于项目文件树和README，识别该项目特有的技术架构DNA，生成极致精准的文档结构。

## 分析输入
项目文件树：
{{.FileTree}}

README内容：
{{.ReadmeContent}}

项目基本信息：
- 项目名称：{{.ProjectName}}
- 输出语言：{{.OutputLanguage}}

## 规则识别原则

### 架构强制性约束（最高优先级）
1. **不遵循即崩溃**：会导致系统无法运行或产生致命bug
2. **不遵循即腐化**：会破坏项目架构完整性，导致代码质量持续下降
3. **项目特异性**：其他项目可能没有此约束，或实现方式完全不同

### 技术约束提取维度
- **框架绑定**：项目与特定技术栈的深度耦合模式
- **自定义封装**：项目特有的工具函数和架构抽象
- **数据流约束**：项目特有的数据处理流程和状态管理
- **集成模式**：与外部系统交互的特殊要求
- **部署绑定**：项目运行环境的特殊依赖

## 输出要求

### 文档结构规范
```xml
<?xml version="1.0" encoding="UTF-8"?>
<document_structure>
    <title>{{.ProjectName}} 技术DNA</title>
    <description>项目特有的架构强制性约束</description>
    <pages>
        <page id="[tech-domain]" importance="critical">
            <title>[技术领域] 强制性约束</title>
            <description>[该领域不遵循会导致架构腐化的核心问题]</description>
            <relevant_files>
                <file_path>[关键实现文件1]</file_path>
                <file_path>[关键实现文件2]</file_path>
            </relevant_files>
        </page>
        <!-- 生成3-5个页面，每个页面聚焦一个架构级约束领域 -->
    </pages>
</document_structure>
```

### 页面规划标准
1. **技术领域精准**：每个页面对应一个具体的架构层面（如"数据库分批操作"、"LLM调用模式"）
2. **重要性统一**：所有页面标记为critical，因为都是架构强制性约束
3. **文件关联核心**：选择最具代表性的2-3个实现文件，文件必须来自项目文件树中，禁止出现项目不存在的文件
4. **避免功能划分**：按技术架构层面而非业务功能划分

### 质量验证
1. 每个页面必须解决"不遵循会导致项目代码腐化"的问题
2. 页面标题必须包含具体技术术语，避免抽象概念
3. 描述必须明确指出架构风险点
4. 相关文件必须能体现该约束的具体实现

## 分析步骤
1. 扫描文件树，识别项目核心技术栈和架构模式
2. 分析README中的业务描述，理解项目技术特点
3. 找出项目中最具特异性的技术实现（非通用最佳实践）
4. 按架构层面划分，确定3-5个核心约束领域
5. 为每个领域选择能体现约束实现的关键文件

记住：这不是技术文档，是项目架构的生存法则。每个约束都必须能防止代码灾难。